#!/usr/bin/env node

var fs = require("fs"),
    pa = require("../index"),
    path = require("path");

if (process.argv.length < 4) {
  console.warn("Usage: pa-extract /path/to/file.pa /directory/to/extract/to");
  process.exit(1);
}

fs.readFile(process.argv[2], function(err, data) {
  if (err) {
    console.warn("Couldn't read `" + process.argv[2] + "': " + err.message);
    process.exit(1);
  }

  fs.stat(process.argv[3], function(err, stats) {
    if (err) {
      console.warn("Couldn't stat `" + process.argv[3] + "': " + err.message);
      process.exit(1);
    }

    if (!stats.isDirectory()) {
      console.warn("`" + process.argv[3] + "' is not a directory, can't use it as an extract target");
      process.exit(1);
    }

    pa.parse(data, function(err, parsed) {
      if (err) {
        console.warn("Couldn't parse `" + process.argv[2] + "': " + err.message);
        process.exit(1);
      }

      var indexes = Object.keys(parsed.objects).filter(function(e) {
        return typeof e === "string" && e.match(/^\d+$/);
      });

      var write_next_index = function() {
        if (!indexes.length) { return; }

        var index = indexes.shift();

        fs.writeFile(path.join(process.argv[3], index + ".dat"), parsed.objects[index] || Buffer([]), function(err) {
          if (err) {
            console.warn("Couldn't write file `" + index + ".dat': " + err.message);
            process.exit(1);
          }

          console.log("Extracted file `" + index + ".dat'");

          write_next_index();
        });
      };

      write_next_index();
    });
  });
});
